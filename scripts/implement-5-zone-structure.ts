#!/usr/bin/env tsx
// IMPLEMENTACI√ìN DE ESTRUCTURA DE 5 ZONAS DEL CAUCA
// Sistema completo de coordinadores zonales y l√≠deres municipales

import { createClient } from '@supabase/supabase-js';

// Credenciales recuperadas
const supabaseUrl = 'https://djgkjtqpzedxnqwqdcjx.supabase.co';
const serviceRoleKey = 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6ImRqZ2tqdHFwemVkeG5xd3FkY2p4Iiwicm9sZSI6InNlcnZpY2Vfcm9sZSIsImlhdCI6MTc1NDkzMDE3NiwiZXhwIjoyMDcwNTA2MTc2fQ.DJhWtNGqjI-q82oNIIamPb_AQb9-L7MjTSPvWQRx6D4';

console.log('üó∫Ô∏è  MAIS CAUCA - IMPLEMENTACI√ìN ESTRUCTURA 5 ZONAS');
console.log('===============================================');
console.log('üìÖ Fecha:', new Date().toLocaleString('es-CO'));
console.log('');

const supabase = createClient(supabaseUrl, serviceRoleKey, {
  auth: {
    autoRefreshToken: false,
    persistSession: false
  }
});

// Definici√≥n de la estructura de 5 zonas del Cauca
const ESTRUCTURA_CAUCA = {
  NORTE: {
    nombre: 'Zona Norte del Cauca',
    coordinador: {
      nombre: 'Carlos Eduardo Vallejo',
      email: 'carlos.vallejo@maiscauca.com',
      cedula: '76123456',
      telefono: '3201234567'
    },
    municipios: [
      'Santander de Quilichao',
      'Villa Rica', 
      'Caldono',
      'Morales',
      'Su√°rez'
    ]
  },
  SUR: {
    nombre: 'Zona Sur del Cauca',
    coordinador: {
      nombre: 'Mar√≠a Patricia Gonzalez',
      email: 'maria.gonzalez@maiscauca.com',
      cedula: '76234567',
      telefono: '3202345678'
    },
    municipios: [
      'Florencia',
      'Bol√≠var',
      'Mercaderes',
      'Pat√≠a (El Bordo)',
      'Balboa'
    ]
  },
  CENTRO: {
    nombre: 'Zona Centro del Cauca',
    coordinador: {
      nombre: 'Roberto Carlos Mu√±oz',
      email: 'roberto.munoz@maiscauca.com',
      cedula: '76345678',
      telefono: '3203456789'
    },
    municipios: [
      'Popay√°n',
      'Timb√≠o',
      'Sotar√° (Paispamba)',
      'Purac√© (Coconuco)',
      'Silvia'
    ]
  },
  PACIFICO: {
    nombre: 'Zona Pac√≠fico del Cauca',
    coordinador: {
      nombre: 'Ana Luc√≠a Torres',
      email: 'ana.torres@maiscauca.com',
      cedula: '76456789',
      telefono: '3204567890'
    },
    municipios: [
      'Guapi',
      'Timbiqu√≠',
      'L√≥pez de Micay',
      'Argelia'
    ]
  },
  MACIZO: {
    nombre: 'Zona Macizo Colombiano',
    coordinador: {
      nombre: 'Luis Fernando Chocu√©',
      email: 'luis.chocue@maiscauca.com',
      cedula: '76567890',
      telefono: '3205678901'
    },
    municipios: [
      'Almaguer',
      'San Sebasti√°n',
      'Santa Rosa',
      'La Sierra',
      'La Vega',
      'Rosas'
    ]
  }
};

// Funci√≥n para generar contrase√±a temporal
function generateTemporaryPassword(): string {
  const chars = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';
  let password = 'Mais';
  for (let i = 0; i < 8; i++) {
    password += chars.charAt(Math.floor(Math.random() * chars.length));
  }
  return password + '2025!';
}

interface ImplementationResult {
  zona: string;
  coordinadorCreado: boolean;
  municipiosConfigured: number;
  lideresCreated: number;
  error?: string;
}

const results: ImplementationResult[] = [];

// Paso 1: Crear coordinadores zonales
async function createZonalCoordinator(zona: string, config: any) {
  console.log(`üéØ Creando coordinador para ${config.nombre}...`);
  
  try {
    const tempPassword = generateTemporaryPassword();
    
    // Crear usuario en Supabase Auth
    const { data: authData, error: authError } = await supabase.auth.admin.createUser({
      email: config.coordinador.email,
      password: tempPassword,
      email_confirm: true,
      user_metadata: {
        full_name: config.coordinador.nombre,
        role: 'coordinador-zonal',
        zona: zona.toLowerCase(),
        telefono: config.coordinador.telefono,
        cedula: config.coordinador.cedula
      }
    });

    if (authError) {
      console.log(`‚ùå Error creando auth para ${config.coordinador.nombre}: ${authError.message}`);
      return false;
    }

    // Crear perfil en user_profiles
    const { error: profileError } = await supabase
      .from('user_profiles')
      .insert({
        id: authData.user.id,
        email: config.coordinador.email,
        full_name: config.coordinador.nombre,
        role: 'coordinador-zonal',
        status: 'active',
        phone: config.coordinador.telefono,
        document_number: config.coordinador.cedula,
        metadata: {
          temporalPassword: tempPassword,
          needsPasswordChange: true,
          role_level: 2,
          can_create_roles: ['lider-municipal', 'lider-comunitario', 'votante']
        }
      });

    if (profileError) {
      console.log(`‚ùå Error creando perfil para ${config.coordinador.nombre}: ${profileError.message}`);
      return false;
    }

    console.log(`‚úÖ Coordinador creado: ${config.coordinador.nombre}`);
    console.log(`   üìß Email: ${config.coordinador.email}`);
    console.log(`   üîë Contrase√±a temporal: ${tempPassword}`);
    
    return true;

  } catch (error) {
    console.log(`üí• Excepci√≥n creando coordinador para ${zona}:`, error);
    return false;
  }
}

// Paso 2: Crear l√≠deres municipales para cada municipio
async function createMunicipalLeaders(zona: string, config: any, coordinadorId: string) {
  console.log(`üèòÔ∏è  Creando l√≠deres municipales para ${config.nombre}...`);
  
  let leadersCreated = 0;
  
  for (const municipio of config.municipios) {
    try {
      const tempPassword = generateTemporaryPassword();
      const leaderEmail = `lider.${municipio.toLowerCase().replace(/\s+/g, '').replace(/[()]/g, '')}@maiscauca.com`;
      const leaderName = `L√≠der Municipal de ${municipio}`;
      
      // Crear usuario en Supabase Auth
      const { data: authData, error: authError } = await supabase.auth.admin.createUser({
        email: leaderEmail,
        password: tempPassword,
        email_confirm: true,
        user_metadata: {
          full_name: leaderName,
          role: 'lider-municipal',
          zona: zona.toLowerCase(),
          municipio: municipio
        }
      });

      if (authError) {
        console.log(`‚ùå Error creando auth para l√≠der de ${municipio}: ${authError.message}`);
        continue;
      }

      // Crear perfil en user_profiles
      const { error: profileError } = await supabase
        .from('user_profiles')
        .insert({
          id: authData.user.id,
          email: leaderEmail,
          full_name: leaderName,
          role: 'lider-municipal',
          status: 'active',
          metadata: {
            temporalPassword: tempPassword,
            needsPasswordChange: true,
            role_level: 3,
            can_create_roles: ['lider-comunitario', 'votante']
          }
        });

      if (profileError) {
        console.log(`‚ùå Error creando perfil para l√≠der de ${municipio}: ${profileError.message}`);
        continue;
      }

      console.log(`   ‚úÖ L√≠der creado: ${municipio}`);
      leadersCreated++;

    } catch (error) {
      console.log(`   ‚ùå Excepci√≥n creando l√≠der para ${municipio}:`, error);
    }
  }
  
  return leadersCreated;
}

// Implementar estructura completa
async function implementZonalStructure() {
  try {
    console.log('üöÄ INICIANDO IMPLEMENTACI√ìN DE ESTRUCTURA ZONAL...');
    console.log('');

    // Verificar director departamental existe
    console.log('üëë Verificando director departamental...');
    const { data: director, error: directorError } = await supabase
      .from('user_profiles')
      .select('id, full_name, email, role')
      .eq('email', 'joseluisdiago@maiscauca.com')
      .single();

    if (directorError || !director) {
      console.log('‚ùå CR√çTICO: Director departamental no encontrado');
      console.log('   Se requiere Jos√© Luis Diago Franco para continuar');
      process.exit(1);
    }

    console.log(`‚úÖ Director encontrado: ${director.full_name}`);
    console.log('');

    // Implementar cada zona
    for (const [zonaKey, zonaConfig] of Object.entries(ESTRUCTURA_CAUCA)) {
      console.log(`üåç Implementando ${zonaConfig.nombre}...`);
      console.log('='.repeat(50));
      
      const result: ImplementationResult = {
        zona: zonaKey,
        coordinadorCreado: false,
        municipiosConfigured: zonaConfig.municipios.length,
        lideresCreated: 0
      };

      // Crear coordinador zonal
      const coordinadorCreated = await createZonalCoordinator(zonaKey, zonaConfig);
      result.coordinadorCreado = coordinadorCreated;

      if (coordinadorCreated) {
        // Obtener ID del coordinador reci√©n creado
        const { data: coordinadorData } = await supabase
          .from('user_profiles')
          .select('id')
          .eq('email', zonaConfig.coordinador.email)
          .single();

        if (coordinadorData) {
          // Crear l√≠deres municipales
          const leadersCreated = await createMunicipalLeaders(
            zonaKey, 
            zonaConfig, 
            coordinadorData.id
          );
          result.lideresCreated = leadersCreated;
        }
      }

      results.push(result);
      console.log('');
    }

    // Generar reporte final
    console.log('üìä REPORTE FINAL DE IMPLEMENTACI√ìN');
    console.log('==================================');

    let totalCoordinadores = 0;
    let totalLideres = 0;

    results.forEach(result => {
      const icon = result.coordinadorCreado ? '‚úÖ' : '‚ùå';
      console.log(`${icon} ${result.zona}:`);
      console.log(`   Coordinador: ${result.coordinadorCreado ? 'CREADO' : 'FALL√ì'}`);
      console.log(`   L√≠deres municipales: ${result.lideresCreated}/${result.municipiosConfigured}`);
      
      if (result.coordinadorCreado) totalCoordinadores++;
      totalLideres += result.lideresCreated;
    });

    console.log('');
    console.log('üìà ESTAD√çSTICAS GLOBALES:');
    console.log(`üë• Coordinadores zonales creados: ${totalCoordinadores}/5`);
    console.log(`üèòÔ∏è  L√≠deres municipales creados: ${totalLideres}/42`);
    console.log(`üìä Tasa de √©xito: ${((totalCoordinadores + totalLideres) / 47 * 100).toFixed(1)}%`);

    console.log('');
    console.log('üéØ ESTRUCTURA TERRITORIAL COMPLETA:');
    console.log('1. Director Departamental (Jos√© Luis Diago)');
    console.log(`2. ${totalCoordinadores} Coordinadores Zonales`);
    console.log(`3. ${totalLideres} L√≠deres Municipales`);
    console.log('4. Capacidad para crear l√≠deres comunitarios');
    console.log('5. Capacidad para registrar votantes');

    console.log('');
    if (totalCoordinadores >= 4 && totalLideres >= 30) {
      console.log('üéâ IMPLEMENTACI√ìN EXITOSA');
      console.log('‚úÖ Estructura zonal operativa');
      console.log('‚úÖ Jerarqu√≠a de roles establecida');
      console.log('‚úÖ Permisos de creaci√≥n configurados');
    } else {
      console.log('‚ö†Ô∏è  IMPLEMENTACI√ìN PARCIAL');
      console.log('‚ùå Algunos elementos no se crearon correctamente');
    }

    console.log('');
    console.log('üí° PR√ìXIMOS PASOS:');
    console.log('- Verificar login de coordinadores zonales');
    console.log('- Probar creaci√≥n de l√≠deres comunitarios');
    console.log('- Establecer votantes por cada territorio');
    console.log('- Implementar dashboard espec√≠fico por zona');

    console.log('');
    console.log('üîê CREDENCIALES GENERADAS:');
    console.log('Ver logs anteriores para contrase√±as temporales');
    console.log('Todos los usuarios deben cambiar contrase√±a al primer login');

    console.log('');
    console.log('üèÅ IMPLEMENTACI√ìN ZONAL COMPLETADA');

    process.exit(0);

  } catch (error) {
    console.error('üí• ERROR CR√çTICO EN IMPLEMENTACI√ìN:');
    console.error(error);
    
    console.log('');
    console.log('üö® IMPLEMENTACI√ìN FALLIDA');
    console.log('‚ùå La estructura zonal no pudo establecerse');
    
    process.exit(1);
  }
}

// Ejecutar implementaci√≥n
implementZonalStructure();